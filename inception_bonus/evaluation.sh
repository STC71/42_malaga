#!/bin/bash

# **************************************************************************** #
#                                                                              #
#                                                                              #
#    evaluation.sh - Script de Evaluaci√≥n Inception    :+:      :+:    :+:     #
#                                                     +:+ +:+         +:+      #
#    By: sternero <sternero@student.42malaga.com>  +#+  +:+       +#+          #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2025-08-04 by sternero               #+#    #+#                  #
#    Updated: 2025-08-04 by sternero              ###   ########.fr            #
#                                                                              #
# **************************************************************************** #

# Colores para una mejor presentaci√≥n
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color
BOLD='\033[1m'
DIM='\033[2m'

# Contadores para la evaluaci√≥n
PASSED=0
FAILED=0
TOTAL=0

# Variables para el terminal de debug
DEBUG_TERMINAL_ID=""
DEBUG_ENABLED=false

# Detectar ancho de terminal din√°micamente
get_terminal_width() {
    local width
    if command -v tput >/dev/null 2>&1; then
        width=$(tput cols 2>/dev/null)
    fi
    
    # Fallback si no se puede detectar
    if [ -z "$width" ] || [ "$width" -lt 60 ]; then
        width=80
    fi
    
    # Limitar ancho m√°ximo para mejor legibilidad
    if [ "$width" -gt 100 ]; then
        width=100
    fi
    
    echo $width
}

# Funci√≥n para mostrar encabezados
print_header() {
    local title="$1"
    local width=$(get_terminal_width)
    local title_len=${#title}
    local padding=$(( (width - title_len - 4) / 2 ))
    
    echo
    printf "${CYAN}%*s${NC}\n" $width | tr ' ' '='
    printf "${WHITE}${BOLD}%*s %s %*s${NC}\n" $padding "" "$title" $padding ""
    printf "${CYAN}%*s${NC}\n" $width | tr ' ' '='
    echo
}

# Funci√≥n para mostrar secciones
print_section() {
    local title="$1"
    local width=$(get_terminal_width)
    local title_len=${#title}
    local padding=$((width - title_len - 4))
    
    echo
    printf "${BLUE}%*s${NC}\n" $width | tr ' ' '-'
    printf "${BLUE}| ${BOLD}%s%*s${NC}${BLUE} |${NC}\n" "$title" $padding ""
    printf "${BLUE}%*s${NC}\n" $width | tr ' ' '-'
    echo
}

# Funci√≥n para mostrar tests
print_test() {
    echo -e "${YELLOW}${BOLD}> ${NC}${BOLD}$1${NC}"
}

# Funci√≥n para mostrar resultados
print_result() {
    if [ "$1" = "PASS" ]; then
        echo -e "   ${GREEN}${BOLD}[PASS]${NC} $2"
        debug_result "$2" "PASS"
        ((PASSED++))
    elif [ "$1" = "INFO" ]; then
        echo -e "   ${CYAN}${BOLD}[INFO]${NC} $2"
        debug_result "$2" "INFO"
        # No incrementar contadores para secciones informativas
    else
        echo -e "   ${RED}${BOLD}[FAIL]${NC} $2"
        debug_result "$2" "FAIL"
        ((FAILED++))
    fi
    
    # Solo incrementar total para PASS/FAIL, no para INFO
    if [ "$1" != "INFO" ]; then
        ((TOTAL++))
    fi
}

# Funci√≥n para mostrar explicaciones
print_explanation() {
    local text="$1"
    local width=$(get_terminal_width)
    local content_width=$((width - 8))
    
    echo -e "\n${PURPLE}${BOLD}   [INFO] Explicacion:${NC}"
    
    # Usar printf y fmt para un mejor control del texto
    echo "$text" | fmt -w $content_width | sed 's/^/      /'
    echo
}

# Funci√≥n para mostrar informaci√≥n
print_info() {
    local text="$1"
    local width=$(get_terminal_width)
    local content_width=$((width - 8))
    
    echo -e "${CYAN}${BOLD}   [INFO] Informacion:${NC}"
    echo "$text" | fmt -w $content_width | sed 's/^/      /'
}

# Funci√≥n para verificar si un comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Funci√≥n para inicializar terminal de debug
init_debug_terminal() {
    if command_exists gnome-terminal; then
        # Crear archivo temporal para mostrar logs
        DEBUG_LOG="/tmp/inception_debug_$$.log"
        echo "=== INCEPTION DEBUG TERMINAL ===" > "$DEBUG_LOG"
        echo "Mostrando detalles t√©cnicos de cada prueba..." >> "$DEBUG_LOG"
        echo "=============================================" >> "$DEBUG_LOG"
        echo "" >> "$DEBUG_LOG"
        
        # Abrir terminal de debug
        gnome-terminal --title="Inception Debug - Detalles T√©cnicos" -- bash -c "
            echo -e '\033[1;36m=== INCEPTION DEBUG TERMINAL ===\033[0m'
            echo -e '\033[1;33mMonitoreando detalles t√©cnicos de la evaluaci√≥n...\033[0m'
            echo ''
            tail -f '$DEBUG_LOG' 2>/dev/null || (echo 'Error: No se puede leer el log' && sleep 5)
        " &
        
        DEBUG_ENABLED=true
        sleep 1  # Dar tiempo a que se abra el terminal
        
        echo -e "${GREEN}‚úì${NC} Terminal de debug iniciado"
        return 0
    elif command_exists xterm; then
        DEBUG_LOG="/tmp/inception_debug_$$.log"
        echo "=== INCEPTION DEBUG TERMINAL ===" > "$DEBUG_LOG"
        echo "Mostrando detalles t√©cnicos de cada prueba..." >> "$DEBUG_LOG"
        echo "=============================================" >> "$DEBUG_LOG"
        echo "" >> "$DEBUG_LOG"
        
        xterm -title "Inception Debug" -e "tail -f '$DEBUG_LOG'" &
        DEBUG_ENABLED=true
        sleep 1
        
        echo -e "${GREEN}‚úì${NC} Terminal de debug iniciado (xterm)"
        return 0
    else
        echo -e "${YELLOW}‚ö†Ô∏è${NC} No se pudo abrir terminal de debug (gnome-terminal/xterm no disponible)"
        echo -e "${CYAN}Los detalles se mostrar√°n en este terminal${NC}"
        DEBUG_ENABLED=false
        return 1
    fi
}

# Funci√≥n para escribir en el terminal de debug
debug_log() {
    local message="$1"
    local color="${2:-37}"  # Blanco por defecto
    
    if [ "$DEBUG_ENABLED" = true ] && [ -n "$DEBUG_LOG" ]; then
        echo -e "\033[${color}m[$(date '+%H:%M:%S')] ${message}\033[0m" >> "$DEBUG_LOG"
    fi
}

# Funci√≥n para mostrar comando en debug
debug_command() {
    local test_name="$1"
    local command="$2"
    local expected="$3"
    
    if [ "$DEBUG_ENABLED" = true ]; then
        debug_log "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" "1;36"
        debug_log "üß™ PRUEBA: $test_name" "1;33"
        debug_log "üìù COMANDO: $command" "1;32"
        debug_log "üéØ ESPERADO: $expected" "1;34"
        debug_log "‚è≥ Ejecutando..." "1;37"
    fi
}

# Funci√≥n para mostrar ejecuci√≥n de comando en debug
debug_command_execution() {
    local command="$1"
    local show_output="${2:-true}"
    
    if [ "$DEBUG_ENABLED" = true ]; then
        debug_log "‚ö° EJECUTANDO: $command" "1;35"
        
        if [ "$show_output" = "true" ]; then
            # Ejecutar comando y capturar tanto stdout como stderr
            local temp_output=$(mktemp)
            if eval "$command" > "$temp_output" 2>&1; then
                local exit_code=0
            else
                local exit_code=$?
            fi
            
            # Mostrar la salida l√≠nea por l√≠nea con prefijo
            if [ -s "$temp_output" ]; then
                debug_log "üì§ SALIDA DEL COMANDO:" "1;37"
                while IFS= read -r line; do
                    debug_log "  > $line" "0;37"
                done < "$temp_output"
            else
                debug_log "üì§ SALIDA: (sin salida)" "0;37"
            fi
            
            debug_log "üî¢ C√ìDIGO DE SALIDA: $exit_code" "1;37"
            rm -f "$temp_output"
        fi
    fi
}

# Funci√≥n para mostrar resultado en debug
debug_result() {
    local obtained="$1"
    local status="$2"
    
    if [ "$DEBUG_ENABLED" = true ]; then
        if [ "$status" = "PASS" ]; then
            debug_log "‚úÖ OBTENIDO: $obtained" "1;32"
            debug_log "üéâ RESULTADO: PASS" "1;32"
        elif [ "$status" = "FAIL" ]; then
            debug_log "‚ùå OBTENIDO: $obtained" "1;31"
            debug_log "üí• RESULTADO: FAIL" "1;31"
        else
            debug_log "‚ÑπÔ∏è OBTENIDO: $obtained" "1;33"
            debug_log "üìã RESULTADO: $status" "1;33"
        fi
        debug_log "" "0"
    fi
}

# Funci√≥n para crear separador entre bloques de tests
debug_block_separator() {
    local block_name="$1"
    
    if [ "$DEBUG_ENABLED" = true ]; then
        debug_log "" "0"
        debug_log "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "1;36"
        debug_log "üî∏ FINALIZANDO BLOQUE: $block_name" "1;36"
        debug_log "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "1;36"
        debug_log "" "0"
    fi
}

# Funci√≥n para limpiar debug terminal
cleanup_debug() {
    if [ "$DEBUG_ENABLED" = true ] && [ -n "$DEBUG_LOG" ]; then
        debug_log "üèÅ EVALUACI√ìN COMPLETADA" "1;35"
        debug_log "üìä Total: $TOTAL | Aprobadas: $PASSED | Fallidas: $FAILED" "1;35"
        debug_log "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" "1;36"
        debug_log "" "0"
        debug_log "‚úÖ TERMINAL DE DEBUG MANTENIDA ABIERTA" "1;33"
        debug_log "üìã Puedes revisar todos los comandos ejecutados arriba" "1;37"
        debug_log "üö™ Cierra esta ventana cuando termines de revisar" "1;37"
        debug_log "" "0"
        debug_log "üëã ¬°Gracias por usar el sistema de debug!" "1;36"
    fi
}

# Funci√≥n para pausa interactiva entre m√≥dulos
pause_between_modules() {
    local emoji="$1"
    local message="${2:-Pulsa cualquier tecla para continuar}"
    local width=$(get_terminal_width)
    
    echo ""
    echo -e "${DIM}$(printf '%*s' $width | tr ' ' '-')${NC}"
    echo -n -e "${CYAN}${BOLD}   $emoji $message... ${NC}"
    
    read -n 1 -s -r
    echo ""
    echo -e "${DIM}$(printf '%*s' $width | tr ' ' '-')${NC}"
    echo ""
}

# Funci√≥n para verificar contenedores
check_containers() {
    local expected_containers=("nginx" "wordpress" "mariadb" "redis" "adminer" "ftp-server" "website" "portainer")
    local running_containers=($(docker ps --format "{{.Names}}" | sort))
    
    echo -e "${DIM}   Contenedores esperados: ${expected_containers[*]}${NC}"
    echo -e "${DIM}   Contenedores en ejecuci√≥n: ${running_containers[*]}${NC}\n"
    
    for container in "${expected_containers[@]}"; do
        if docker ps --format "{{.Names}}" | grep -q "^${container}$"; then
            echo -e "   ${GREEN}‚óè${NC} ${container}"
        else
            echo -e "   ${RED}‚óè${NC} ${container} ${RED}(no encontrado)${NC}"
            return 1
        fi
    done
    return 0
}

# Funci√≥n para verificar puertos
check_ports() {
    local ports=("443" "2121")
    
    for port in "${ports[@]}"; do
        if netstat -tuln 2>/dev/null | grep -q ":${port} " || ss -tuln 2>/dev/null | grep -q ":${port} "; then
            echo -e "   ${GREEN}‚óè${NC} Puerto ${port} activo"
        else
            echo -e "   ${RED}‚óè${NC} Puerto ${port} inactivo"
            return 1
        fi
    done
    return 0
}

# Function to fix system time if needed
fix_system_time() {
    echo -e "${YELLOW}${BOLD}‚è∞ SINCRONIZACI√ìN DE HORA DEL SISTEMA${NC}"
    echo -e "${DIM}   Verificando y corrigiendo la hora del sistema...${NC}"
    echo ""
    
    # Check current time
    current_time=$(date)
    echo -e "${DIM}   Hora actual del sistema: $current_time${NC}"
    
    # Calculate time difference (rough estimation)
    current_year=$(date +%Y)
    current_month=$(date +%m)
    current_day=$(date +%d)
    current_hour=$(date +%H)
    
    # Expected: 07/08/2025 11:21 (approximately)
    expected_day=7
    expected_month=8
    expected_year=2025
    
    time_diff_detected=false
    
    if [ "$current_year" -ne "$expected_year" ] || [ "$current_month" -ne "$expected_month" ] || [ "$current_day" -ne "$expected_day" ]; then
        time_diff_detected=true
        echo -e "${RED}   ‚ö†Ô∏è  Detectado desfase temporal significativo${NC}"
        echo -e "${YELLOW}   Fecha esperada: 07/08/2025${NC}"
        echo -e "${YELLOW}   Fecha actual: $(date '+%d/%m/%Y')${NC}"
    fi
    
    # Try to sync time using different methods
    echo -e "${DIM}   Intentando sincronizaci√≥n autom√°tica...${NC}"
    
    sync_success=false
    
    # Method 1: timedatectl (most modern)
    if command -v timedatectl >/dev/null 2>&1; then
        echo -e "${DIM}   ‚Ä¢ Usando timedatectl...${NC}"
        if sudo timedatectl set-ntp true >/dev/null 2>&1; then
            sleep 2
            sudo timedatectl sync >/dev/null 2>&1
            sync_success=true
        fi
    fi
    
    # Method 2: ntpdate (traditional)
    if ! $sync_success && command -v ntpdate >/dev/null 2>&1; then
        echo -e "${DIM}   ‚Ä¢ Usando ntpdate...${NC}"
        if sudo ntpdate -s pool.ntp.org >/dev/null 2>&1 || sudo ntpdate -s time.nist.gov >/dev/null 2>&1; then
            sync_success=true
        fi
    fi
    
    # Method 3: chronyd restart
    if ! $sync_success && command -v chronyd >/dev/null 2>&1; then
        echo -e "${DIM}   ‚Ä¢ Reiniciando chronyd...${NC}"
        sudo systemctl restart chronyd >/dev/null 2>&1 && sync_success=true
    fi
    
    # Method 4: Manual correction if automatic sync fails
    if ! $sync_success && $time_diff_detected; then
        echo -e "${RED}   ‚ö†Ô∏è  Sincronizaci√≥n autom√°tica fall√≥${NC}"
        echo -e "${CYAN}   ¬øDeseas establecer la fecha manualmente? (y/n)${NC}"
        read -n 1 -r manual_choice
        echo ""
        
        if [[ $manual_choice =~ ^[Yy]$ ]]; then
            echo -e "${YELLOW}   Estableciendo zona horaria Madrid y fecha: 07/08/2025 11:21...${NC}"
            
            # Set timezone to Madrid
            if sudo timedatectl set-timezone Europe/Madrid >/dev/null 2>&1; then
                echo -e "${GREEN}   ‚úì Zona horaria establecida: Madrid (Europe/Madrid)${NC}"
            else
                echo -e "${YELLOW}   ‚ö†Ô∏è  No se pudo establecer la zona horaria${NC}"
            fi
            
            # Set the correct date and time
            if sudo date -s "2025-08-07 11:21:00" >/dev/null 2>&1; then
                echo -e "${GREEN}   ‚úì Fecha y hora establecidas manualmente${NC}"
                sync_success=true
            else
                echo -e "${RED}   ‚úó No se pudo establecer la fecha manualmente${NC}"
            fi
        fi
    fi
    
    # Show final time
    new_time=$(date)
    if $sync_success; then
        echo -e "${GREEN}‚úì${NC} Hora sincronizada: $new_time"
    else
        echo -e "${YELLOW}‚ö†Ô∏è${NC} Hora actual: $new_time (puede necesitar correcci√≥n manual)"
    fi
    
    echo ""
    
    # Brief pause to see the result
    echo -n -e "${CYAN}${BOLD}   ‚åö Presiona cualquier tecla para continuar con la evaluaci√≥n... ${NC}"
    read -n 1 -s -r
    echo ""
    echo ""
}

# Function to perform quick readiness check
quick_readiness_check() {
    local ready=0
    local issues=()
    
    echo -e "${BLUE}${BOLD}üîç VERIFICACI√ìN PREVIA DE ESTADO${NC}"
    echo -e "${DIM}   Comprobando requisitos b√°sicos antes de la evaluaci√≥n completa...${NC}"
    echo ""
    
    # Check Docker
    if ! command_exists docker || ! docker info >/dev/null 2>&1; then
        issues+=("Docker no est√° disponible o no funciona")
    else
        echo -e "${GREEN}‚úì${NC} Docker operativo"
    fi
    
    # Check .env file
    if [ ! -f ".env" ]; then
        issues+=("Archivo .env no encontrado")
    else
        echo -e "${GREEN}‚úì${NC} Archivo .env presente"
    fi
    
    # Check directory structure
    if [ ! -d "srcs" ] || [ ! -f "srcs/docker-compose.yml" ]; then
        issues+=("Estructura de directorios incorrecta")
    else
        echo -e "${GREEN}‚úì${NC} Estructura de directorios correcta"
    fi
    
    # Check if containers are running
    local running_containers=$(docker ps --format "{{.Names}}" 2>/dev/null | wc -l)
    if [ "$running_containers" -lt 3 ]; then
        issues+=("Servicios Docker no est√°n ejecut√°ndose ($running_containers contenedores activos)")
    else
        echo -e "${GREEN}‚úì${NC} Servicios Docker ejecut√°ndose ($running_containers contenedores)"
    fi
    
    # Check basic connectivity
    if [ -f ".env" ] && command_exists docker; then
        local domain=$(grep "^DOMAIN_NAME=" .env 2>/dev/null | cut -d'=' -f2)
        if [ -n "$domain" ]; then
            echo -e "${DIM}   Probando conectividad b√°sica a $domain...${NC}"
            if curl -k -s -o /dev/null -w "%{http_code}" "https://$domain/" 2>/dev/null | grep -q "200"; then
                echo -e "${GREEN}‚úì${NC} Conectividad web funcionando"
                ready=1
            else
                issues+=("Servicios web no responden en https://$domain/")
            fi
        else
            issues+=("Dominio no configurado en .env")
        fi
    fi
    
    echo ""
    
    # Show results
    if [ ${#issues[@]} -eq 0 ] && [ $ready -eq 1 ]; then
        echo -e "${GREEN}${BOLD}‚úÖ ESTADO: LISTO PARA EVALUACI√ìN${NC}"
        echo -e "${GREEN}   Todos los requisitos b√°sicos est√°n cumplidos${NC}"
        echo ""
        
        # Pausa para que el evaluador pueda leer el estado
        echo -n -e "${CYAN}${BOLD}   üöÄ Presiona cualquier tecla para comenzar la evaluaci√≥n completa... ${NC}"
        read -n 1 -s -r
        echo ""
        echo ""
        
        return 0
    else
        echo -e "${RED}${BOLD}‚ö†Ô∏è  ESTADO: REQUIERE ATENCI√ìN${NC}"
        echo -e "${RED}   Se encontraron los siguientes problemas:${NC}"
        for issue in "${issues[@]}"; do
            echo -e "${RED}   ‚Ä¢ $issue${NC}"
        done
        echo ""
        
        echo -e "${CYAN}${BOLD}ü§î ¬øQu√© te gustar√≠a hacer?${NC}"
        echo -e "${WHITE}  1) ${GREEN}Continuar con evaluaci√≥n completa${NC} ${WHITE}(puede mostrar muchos fallos)${NC}"
        echo -e "${WHITE}  2) ${YELLOW}Configurar el proyecto primero${NC} ${WHITE}(recomendado)${NC}"
        echo -e "${WHITE}  3) ${BLUE}Intentar iniciar servicios${NC} ${WHITE}(make all)${NC}"
        echo -e "${WHITE}  4) ${PURPLE}Sincronizar hora del sistema${NC} ${WHITE}(soluciona problemas de certificados)${NC}"
        echo -e "${WHITE}  5) ${RED}Salir${NC}"
        echo ""
        
        read -p "$(echo -e ${GREEN})Selecciona una opci√≥n [2]: $(echo -e ${NC})" choice
        choice=${choice:-2}
        
        case $choice in
            1)
                echo -e "\n${YELLOW}‚ö†Ô∏è  Procediendo con evaluaci√≥n completa...${NC}"
                echo -e "${YELLOW}   Es probable que veas m√∫ltiples fallos debido a los problemas detectados${NC}"
                echo ""
                return 0
                ;;
            2)
                echo -e "\n${GREEN}üîß Iniciando configuraci√≥n del proyecto...${NC}"
                if [ -f "./create_env.sh" ]; then
                    chmod +x ./create_env.sh
                    ./create_env.sh
                    exit 0
                else
                    echo -e "${RED}Error: create_env.sh no encontrado${NC}"
                    exit 1
                fi
                ;;
            3)
                echo -e "\n${BLUE}üöÄ Intentando iniciar servicios...${NC}"
                if [ -f "Makefile" ]; then
                    make all
                    echo -e "\n${GREEN}Servicios iniciados. Ejecuta el script de nuevo para evaluar.${NC}"
                else
                    echo -e "${RED}Error: Makefile no encontrado${NC}"
                fi
                exit 0
                ;;
            4)
                echo -e "\n${PURPLE}‚è∞ Sincronizando hora del sistema...${NC}"
                fix_system_time
                echo -e "${GREEN}Hora sincronizada. Ejecuta el script de nuevo para evaluar.${NC}"
                exit 0
                ;;
            5|*)
                echo -e "\n${GREEN}üëã ¬°Hasta luego!${NC}"
                exit 0
                ;;
        esac
    fi
}

# Inicio del script
clear
print_header " üéØ EVALUACI√ìN PROYECTO INCEPTION - 42 M√ÅLAGA"

echo -e "${BOLD}   Estudiante:${NC} sternero"
echo -e "${BOLD}   Proyecto:${NC} Inception"
echo -e "${BOLD}   Fecha:${NC} $(date '+%d/%m/%Y %H:%M:%S')"
echo -e "${BOLD}   Dominio:${NC} sternero.42.fr"
echo -e "${DIM}   Terminal: $(get_terminal_width) columnas${NC}"

echo ""

# Preguntar si quiere terminal de debug
echo -e "${CYAN}${BOLD}üîç ¬øDeseas abrir un terminal de debug que muestre los detalles t√©cnicos de cada prueba?${NC}"
echo -e "${WHITE}  Esto incluir√° comandos ejecutados, resultados esperados y obtenidos${NC}"
echo -e "${GREEN}  y) S√≠, abrir terminal de debug${NC}"
echo -e "${YELLOW}  n) No, continuar solo con este terminal${NC}"
echo ""

read -p "$(echo -e ${GREEN})¬øAbrir terminal de debug? [y/n]: $(echo -e ${NC})" debug_choice
case $debug_choice in
    [Yy]*)
        echo -e "\n${BLUE}üöÄ Iniciando terminal de debug...${NC}"
        init_debug_terminal
        ;;
    *)
        echo -e "\n${YELLOW}‚ö†Ô∏è  Continuando sin terminal de debug${NC}"
        DEBUG_ENABLED=false
        ;;
esac

echo ""

# Fix system time if needed (important for SSL certificates and repositories)
fix_system_time

# Perform quick readiness check
quick_readiness_check

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# PRELIMINARES
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

print_header "üìã PRELIMINARES"

print_section "Verificaci√≥n del entorno"

print_test "¬øEst√° Docker instalado y funcionando?"
debug_command "Docker instalado y funcionando" "docker --version && docker info >/dev/null 2>&1" "Docker version y info sin errores"
if command_exists docker && docker info >/dev/null 2>&1; then
    debug_command_execution "docker --version"
    debug_command_execution "docker info" false  # No mostrar info completa por ser muy larga
    docker_version=$(docker --version)
    print_result "PASS" "Docker est√° instalado y funcionando correctamente"
    print_info "Versi√≥n: $docker_version"
    debug_result "$docker_version" "PASS"
else
    debug_command_execution "docker --version"
    debug_command_execution "docker info" false
    print_result "FAIL" "Docker no est√° instalado o no funciona"
    debug_result "Docker no disponible o error en docker info" "FAIL"
fi

print_test "¬øEst√° Docker Compose instalado?"
debug_command "Docker Compose instalado" "docker-compose --version" "Versi√≥n de Docker Compose"
if command_exists docker-compose; then
    debug_command_execution "docker-compose --version"
    compose_version=$(docker-compose --version)
    print_result "PASS" "Docker Compose est√° instalado"
    print_info "Versi√≥n: $compose_version"
    debug_result "$compose_version" "PASS"
else
    debug_command_execution "docker-compose --version"
    print_result "FAIL" "Docker Compose no est√° instalado"
    debug_result "docker-compose command not found" "FAIL"
fi

print_test "¬øExiste el archivo .env en la ra√≠z?"
debug_command "Archivo .env en la ra√≠z" "test -f .env" "Archivo .env existe"
if [ -f ".env" ]; then
    debug_command_execution "test -f .env"
    debug_command_execution "grep -c '=' .env"
    print_result "PASS" "Archivo .env encontrado"
    print_info "Contiene $(grep -c "=" .env) variables de entorno"
    print_explanation "El archivo .env es obligatorio y debe contener todas las credenciales y variables de configuraci√≥n, nunca en el repositorio Git."
else
    debug_command_execution "test -f .env"
    print_result "FAIL" "Archivo .env no encontrado"
fi

print_test "¬øExiste la estructura de directorios correcta?"
debug_command "Estructura de directorios" "test -d srcs && test -d srcs/requirements && test -f srcs/docker-compose.yml" "Directorios srcs/, srcs/requirements/ y archivo docker-compose.yml existen"
if [ -d "srcs" ] && [ -d "srcs/requirements" ] && [ -f "srcs/docker-compose.yml" ]; then
    debug_command_execution "ls -la srcs/"
    debug_command_execution "ls -la srcs/requirements/"
    print_result "PASS" "Estructura de directorios correcta"
    print_explanation "El proyecto sigue la estructura requerida: srcs/ contiene docker-compose.yml y requirements/ con todos los servicios"
else
    debug_command_execution "test -d srcs"
    debug_command_execution "test -d srcs/requirements"
    debug_command_execution "test -f srcs/docker-compose.yml"
    print_result "FAIL" "Estructura de directorios incorrecta"
fi

print_test "¬øExiste Makefile en la ra√≠z del proyecto?"
debug_command "Makefile en la ra√≠z" "test -f Makefile" "Archivo Makefile existe en la ra√≠z"
if [ -f "Makefile" ]; then
    debug_command_execution "test -f Makefile"
    debug_command_execution "head -5 Makefile"
    print_result "PASS" "Makefile encontrado en la ra√≠z"
    print_explanation "El Makefile debe estar en la ra√≠z y configurar todos los servicios v√≠a docker-compose"
else
    debug_command_execution "test -f Makefile"
    debug_command_execution "ls -la | grep -i makefile"
    print_result "FAIL" "Makefile no encontrado en la ra√≠z"
fi

# Pausa interactiva antes de la configuraci√≥n Docker
pause_between_modules "üê≥" "Preliminares completados. Continuamos con Docker"

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# PARTE OBLIGATORIA - CONFIGURACI√ìN DOCKER
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

print_header "üê≥ CONFIGURACI√ìN DOCKER"

print_section "Verificaci√≥n de Dockerfiles"

print_test "¬øExisten Dockerfiles para cada servicio?"
debug_command "Dockerfiles para servicios" "ls srcs/requirements/*/Dockerfile" "Dockerfiles para nginx, wordpress y mariadb"
dockerfile_count=0
debug_command_execution "ls srcs/requirements/*/Dockerfile"
for service in nginx wordpress mariadb; do
    if [ -f "srcs/requirements/${service}/Dockerfile" ]; then
        ((dockerfile_count++))
        echo -e "   ${GREEN}‚úì${NC} Dockerfile encontrado para ${service}"
    else
        echo -e "   ${RED}‚úó${NC} Dockerfile faltante para ${service}"
    fi
done

if [ $dockerfile_count -eq 3 ]; then
    print_result "PASS" "Dockerfiles encontrados para todos los servicios principales"
    print_explanation "Cada servicio tiene su propio Dockerfile que permite personalizaci√≥n espec√≠fica, instalaci√≥n de dependencias y configuraci√≥n del entorno."
else
    print_result "FAIL" "Faltan Dockerfiles (encontrados: $dockerfile_count/3)"
fi

print_test "¬øLos Dockerfiles usan im√°genes base apropiadas (Alpine/Debian)?"
debug_command "Im√°genes base en Dockerfiles" "grep 'FROM.*alpine\\|FROM.*debian' srcs/requirements/*/Dockerfile" "FROM alpine o FROM debian en cada Dockerfile"
base_images_ok=0
debug_command_execution "grep 'FROM' srcs/requirements/*/Dockerfile"
for service in nginx wordpress mariadb; do
    if [ -f "srcs/requirements/${service}/Dockerfile" ]; then
        if grep -q "FROM.*\(alpine\|debian\)" "srcs/requirements/${service}/Dockerfile"; then
            ((base_images_ok++))
            echo -e "   ${GREEN}‚úì${NC} ${service} usa imagen base apropiada"
        else
            echo -e "   ${RED}‚úó${NC} ${service} no usa Alpine/Debian"
        fi
    fi
done

if [ $base_images_ok -eq 3 ]; then
    print_result "PASS" "Todos los servicios usan im√°genes base Alpine/Debian"
    print_explanation "Se utilizan im√°genes base oficiales como Alpine o Debian, garantizando estabilidad y compatibilidad."
else
    print_result "FAIL" "Algunos servicios no usan im√°genes base apropiadas"
fi

print_section "An√°lisis del docker-compose.yml"

print_test "¬øEst√° prohibido usar 'network: host' o 'links:'?"
debug_command "B√∫squeda de network: host o links" "grep -r 'network.*host\\|links:' srcs/docker-compose.yml" "No debe aparecer ninguna l√≠nea"
debug_command_execution "grep -r 'network.*host\\|links:' srcs/docker-compose.yml"
if ! grep -r "network.*host\|links:" srcs/docker-compose.yml 2>/dev/null; then
    print_result "PASS" "No se usa 'network: host' ni 'links:'"
    print_explanation "El proyecto utiliza redes personalizadas de Docker en lugar de configuraciones prohibidas, lo que es una buena pr√°ctica de seguridad y aislamiento"
else
    print_result "FAIL" "Se encontr√≥ uso de 'network: host' o 'links:'"
fi

print_test "¬øSe usan redes personalizadas en docker-compose.yml?"
debug_command "Redes personalizadas" "grep 'networks:' srcs/docker-compose.yml" "Debe aparecer secci√≥n networks:"
debug_command_execution "grep -A 5 'networks:' srcs/docker-compose.yml"
if grep -q "networks:" srcs/docker-compose.yml; then
    print_result "PASS" "Redes personalizadas configuradas en docker-compose"
    print_explanation "El uso de redes personalizadas permite comunicaci√≥n segura entre contenedores usando nombres de servicio."
else
    print_result "FAIL" "No se encontraron redes personalizadas en docker-compose.yml"
fi

# Pausa interactiva antes de la visi√≥n general del proyecto
pause_between_modules "üéì" "Configuraci√≥n Docker verificada. Pasamos a conceptos te√≥ricos"

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# VISI√ìN GENERAL DEL PROYECTO
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

print_header "üéì VISI√ìN GENERAL DEL PROYECTO"

print_section "Conceptos fundamentales"

print_test "¬øC√≥mo funcionan Docker y docker-compose?"
print_result "INFO" "Explicaci√≥n de Docker y docker-compose"
print_explanation "Docker es una plataforma de contenedorizaci√≥n que empaqueta aplicaciones con sus dependencias en contenedores ligeros y portables. Docker Compose es una herramienta que permite definir y ejecutar aplicaciones multi-contenedor usando archivos YAML, orquestando m√∫ltiples servicios, redes y vol√∫menes de forma declarativa y reproducible."

print_test "¬øCu√°l es la diferencia entre una imagen Docker usada con y sin docker-compose?"
print_result "INFO" "Diferencias en el uso de im√°genes Docker"
print_explanation "Sin docker-compose, las im√°genes se ejecutan de forma aislada usando 'docker run' con configuraci√≥n manual de redes, vol√∫menes y variables. Con docker-compose, las im√°genes se orquestan autom√°ticamente seg√∫n la configuraci√≥n YAML, compartiendo redes personalizadas, vol√∫menes nombrados y variables de entorno, facilitando la comunicaci√≥n entre servicios."

print_test "¬øCu√°les son los beneficios de Docker comparado con VMs?"
print_result "INFO" "Ventajas de Docker sobre m√°quinas virtuales"
print_explanation "Docker ofrece mayor eficiencia al compartir el kernel del host (vs. cada VM requiere su propio OS), inicio m√°s r√°pido (segundos vs. minutos), menor consumo de recursos (MB vs. GB), mejor portabilidad entre entornos, y facilidad para escalado horizontal. Los contenedores son m√°s ligeros y permiten mayor densidad de aplicaciones por servidor."

print_test "¬øPor qu√© es pertinente la estructura de directorios requerida?"
print_result "INFO" "Importancia de la estructura de directorios"
print_explanation "La estructura srcs/ con requirements/ separando cada servicio garantiza modularidad, mantenibilidad y claridad organizacional. Cada servicio tiene su Dockerfile y configuraciones aisladas, facilitando desarrollo independiente, debugging espec√≠fico, y cumplimiento de principios de separaci√≥n de responsabilidades en arquitecturas de microservicios."

# Pausa interactiva antes de comenzar pruebas t√©cnicas
pause_between_modules "üåê" "Conceptos te√≥ricos cubiertos. Iniciamos pruebas t√©cnicas"

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# NGINX
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

print_header "üåê NGINX - SERVIDOR WEB"

print_section "Configuraci√≥n y funcionamiento"

print_test "¬øExiste la configuraci√≥n de Nginx?"
debug_command "Configuraci√≥n de Nginx" "ls -la srcs/requirements/nginx/conf/" "Archivos de configuraci√≥n en directorio conf"
debug_command_execution "ls -la srcs/requirements/nginx/conf/"
if [ -d "srcs/requirements/nginx/conf" ] && [ "$(ls -A srcs/requirements/nginx/conf/)" ]; then
    print_result "PASS" "Configuraci√≥n de Nginx encontrada"
    print_explanation "Nginx tiene archivos de configuraci√≥n personalizados que permiten servir la aplicaci√≥n WordPress correctamente."
else
    print_result "FAIL" "Configuraci√≥n de Nginx no encontrada"
fi

print_test "¬øNginx est√° ejecut√°ndose correctamente?"
debug_command "Nginx ejecut√°ndose" "docker ps | grep nginx" "Container nginx running"
if docker ps | grep -q nginx; then
    debug_command_execution "docker ps --format 'table {{.Names}}\t{{.Status}}' | grep nginx"
    container_status=$(docker ps --format "table {{.Names}}\t{{.Status}}" | grep nginx)
    print_result "PASS" "Contenedor nginx est√° ejecut√°ndose"
    debug_result "$container_status" "PASS"
else
    debug_command_execution "docker ps | grep nginx"
    print_result "FAIL" "Contenedor nginx no est√° ejecut√°ndose"
    debug_result "No nginx container found in docker ps" "FAIL"
fi

print_test "¬øNginx est√° configurado para usar TLS 1.2 o 1.3?"
debug_command "TLS configurado en Nginx" "docker exec nginx nginx -T | grep 'ssl_protocols.*TLSv1\\.[23]'" "ssl_protocols TLSv1.2 TLSv1.3 en configuraci√≥n"
tls_config=$(docker exec nginx nginx -T 2>/dev/null | grep -E "ssl_protocols.*TLSv1\.[23]" | head -1)
if [ -n "$tls_config" ]; then
    debug_command_execution "docker exec nginx nginx -T | grep 'ssl_protocols'"
    print_result "PASS" "Nginx configurado con TLS 1.2/1.3"
    print_explanation "TLS 1.2/1.3 proporcionan cifrado seguro y moderno para todas las comunicaciones HTTPS, cumpliendo con los est√°ndares de seguridad actuales."
    debug_result "$tls_config" "PASS"
else
    debug_command_execution "docker exec nginx nginx -T | grep 'ssl_protocols'"
    print_result "FAIL" "Nginx no tiene TLS 1.2/1.3 configurado correctamente"
    debug_result "No TLS 1.2/1.3 found in nginx config" "FAIL"
fi

print_test "¬øEl puerto 443 est√° expuesto y funcionando?"
debug_command "Puerto 443 funcionando" "curl -k -s -o /dev/null -w '%{http_code}' https://sternero.42.fr/" "HTTP status code 200"
debug_command_execution "curl -k -s -o /dev/null -w '%{http_code}' https://sternero.42.fr/"
if check_ports; then
    print_result "PASS" "Puerto 443 est√° abierto y funcionando"
else
    print_result "FAIL" "Puerto 443 no est√° funcionando"
fi

print_test "¬øEl acceso HTTP (puerto 80) est√° bloqueado?"
debug_command "Puerto 80 bloqueado" "curl -m 5 -s http://sternero.42.fr/" "No debe responder"
debug_command_execution "curl -m 5 -s -o /dev/null -w '%{http_code}' http://sternero.42.fr/ || echo 'Conexi√≥n bloqueada o timeout'"
if ! curl -m 5 -s http://sternero.42.fr/ >/dev/null 2>&1; then
    print_result "PASS" "Puerto 80 (HTTP) correctamente bloqueado"
    print_explanation "El acceso HTTP est√° bloqueado, forzando el uso de HTTPS para mayor seguridad."
else
    print_result "FAIL" "Puerto 80 (HTTP) accesible - debe estar bloqueado"
fi

print_test "¬øLa respuesta HTTPS es correcta?"
debug_command "Respuesta HTTPS" "curl -k -s -o /dev/null -w '%{http_code}' https://sternero.42.fr/" "HTTP status code 200"
http_code=$(curl -k -s -o /dev/null -w "%{http_code}" https://sternero.42.fr/ 2>/dev/null)
debug_command_execution "curl -k -s -o /dev/null -w '%{http_code}' https://sternero.42.fr/" false
if echo "$http_code" | grep -q "200"; then
    print_result "PASS" "Respuesta HTTPS correcta (200 OK)"
    print_explanation "El servidor responde correctamente a peticiones HTTPS, indicando que el certificado SSL y la configuraci√≥n est√°n funcionando."
    debug_result "HTTP $http_code" "PASS"
else
    print_result "FAIL" "Respuesta HTTPS incorrecta"
    debug_result "HTTP $http_code (expected 200)" "FAIL"
fi

# Separador al final del bloque Nginx
debug_block_separator "NGINX - SERVIDOR WEB"

# Pausa interactiva antes de WordPress
pause_between_modules "üìù" "Nginx verificado. Continuamos con WordPress"

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# WORDPRESS + PHP-FPM
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

print_header "üìù WORDPRESS + PHP-FPM"

print_section "Instalaci√≥n y configuraci√≥n"

print_test "¬øWordPress est√° ejecut√°ndose?"
debug_command "WordPress ejecut√°ndose" "docker ps | grep wordpress" "Container wordpress running"
debug_command_execution "docker ps --format 'table {{.Names}}\t{{.Status}}' | grep wordpress"
if docker ps | grep -q wordpress; then
    print_result "PASS" "Contenedor WordPress est√° ejecut√°ndose"
else
    print_result "FAIL" "Contenedor WordPress no est√° ejecut√°ndose"
fi

print_test "¬øWordPress est√° instalado y configurado correctamente?"
debug_command "WordPress instalado" "docker exec wordpress test -f /var/www/html/wp-config.php" "wp-config.php debe existir"
debug_command_execution "docker exec wordpress ls -la /var/www/html/wp-config.php"
if docker exec wordpress test -f /var/www/html/wp-config.php; then
    print_result "PASS" "WordPress est√° instalado (wp-config.php existe)"
    print_explanation "WordPress se instala autom√°ticamente usando WP-CLI con configuraci√≥n personalizada que incluye usuarios, base de datos y plugins."
else
    print_result "FAIL" "WordPress no est√° instalado correctamente"
fi

print_test "¬øPHP-FPM est√° funcionando?"
debug_command "PHP-FPM funcionando" "docker exec wordpress pgrep php-fpm" "Procesos php-fpm activos"
debug_command_execution "docker exec wordpress ps aux | grep php-fpm | grep -v grep"
if docker exec wordpress pgrep php-fpm >/dev/null; then
    print_result "PASS" "PHP-FPM est√° ejecut√°ndose"
    print_explanation "PHP-FPM maneja las peticiones PHP de WordPress de manera eficiente, separando el procesamiento web del servidor Nginx."
else
    print_result "FAIL" "PHP-FPM no est√° ejecut√°ndose"
fi

print_test "¬øWordPress tiene volumen persistente?"
debug_command "Volumen persistente WordPress" "docker volume ls | grep wordpress" "Volumen srcs_wordpress debe existir"
debug_command_execution "docker volume ls | grep wordpress"
if docker volume ls | grep -q "srcs_wordpress" && docker volume inspect srcs_wordpress 2>/dev/null | grep -q "data/wordpress"; then
    print_result "PASS" "WordPress tiene volumen persistente configurado"
    print_explanation "Los datos de WordPress se almacenan en un volumen persistente que mantiene el contenido incluso si el contenedor se reinicia."
else
    print_result "FAIL" "WordPress no tiene volumen persistente"
fi

# Separador al final del bloque WordPress
debug_block_separator "WORDPRESS + PHP-FPM"

# Pausa interactiva antes de MariaDB
pause_between_modules "üóÑÔ∏è" "WordPress verificado. Continuamos con MariaDB"

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# MARIADB
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

print_header "üóÑÔ∏è  MARIADB - BASE DE DATOS"

print_section "Configuraci√≥n y acceso"

print_test "¬øMariaDB est√° ejecut√°ndose?"
debug_command "MariaDB ejecut√°ndose" "docker ps | grep mariadb" "Container mariadb running"
debug_command_execution "docker ps --format 'table {{.Names}}\t{{.Status}}' | grep mariadb"
if docker ps | grep -q mariadb; then
    print_result "PASS" "Contenedor MariaDB est√° ejecut√°ndose"
else
    print_result "FAIL" "Contenedor MariaDB no est√° ejecut√°ndose"
fi

print_test "¬øLa base de datos WordPress existe?"
debug_command "Base de datos WordPress" "docker exec mariadb mysql -u sternero -p12345 -e 'USE wordpress_db; SHOW TABLES;'" "Tablas de WordPress"
debug_command_execution "docker exec mariadb mysql -u sternero -p12345 -e 'USE wordpress_db; SHOW TABLES;'"
if docker exec mariadb mysql -u sternero -p12345 -e "USE wordpress_db; SHOW TABLES;" >/dev/null 2>&1; then
    table_count=$(docker exec mariadb mysql -u sternero -p12345 -e "USE wordpress_db; SHOW TABLES;" 2>/dev/null | wc -l)
    print_result "PASS" "Base de datos WordPress existe con $((table_count-1)) tablas"
    print_explanation "MariaDB almacena todos los datos de WordPress incluyendo posts, usuarios, configuraciones y metadatos en tablas estructuradas."
else
    print_result "FAIL" "Base de datos WordPress no existe o no es accesible"
fi

print_test "¬øLos usuarios de base de datos est√°n configurados correctamente?"
debug_command "Usuarios de base de datos" "docker exec mariadb mysql -u root -p12345 -e 'SELECT User, Host FROM mysql.user;'" "Usuarios root y sternero"
debug_command_execution "docker exec mariadb mysql -u root -p12345 -e 'SELECT User, Host FROM mysql.user WHERE User IN (\"root\", \"sternero\");'"
if docker exec mariadb mysql -u root -p12345 -e "SELECT User, Host FROM mysql.user WHERE User IN ('root', 'sternero');" >/dev/null 2>&1; then
    print_result "PASS" "Usuarios de base de datos configurados correctamente"
    print_explanation "Se han creado usuarios espec√≠ficos con permisos apropiados: root para administraci√≥n y sternero para WordPress."
else
    print_result "FAIL" "Usuarios de base de datos no configurados correctamente"
fi

print_test "¬øMariaDB tiene volumen persistente?"
debug_command "Volumen persistente MariaDB" "docker volume ls | grep database" "Volumen srcs_database debe existir"
debug_command_execution "docker volume ls | grep database"
if docker volume ls | grep -q "srcs_database" && docker volume inspect srcs_database 2>/dev/null | grep -q "data/database"; then
    print_result "PASS" "MariaDB tiene volumen persistente configurado"
    print_explanation "Los datos de la base de datos se mantienen en almacenamiento persistente, preservando la informaci√≥n entre reinicios."
else
    print_result "FAIL" "MariaDB no tiene volumen persistente"
fi

# Separador al final del bloque MariaDB
debug_block_separator "MARIADB - BASE DE DATOS"

# Pausa despu√©s de MariaDB antes de verificaci√≥n de persistencia
pause_between_modules "üíæ" "MariaDB verificado. Continuamos con verificaci√≥n de persistencia"

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# VERIFICACI√ìN DE PERSISTENCIA
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

print_header "üíæ VERIFICACI√ìN DE PERSISTENCIA"

print_section "Persistencia de datos"

print_test "¬øLos vol√∫menes mantienen datos entre reinicios?"
debug_command "Verificaci√≥n de persistencia" "ls -la /home/sternero/Inception/data/" "Directorios wordpress y database deben existir"
debug_command_execution "ls -la /home/sternero/Inception/data/"
if [ -d "/home/sternero/Inception/data/wordpress" ] && [ -d "/home/sternero/Inception/data/database" ]; then
    debug_command_execution "ls -la /home/sternero/Inception/data/wordpress/ | wc -l"
    debug_command_execution "ls -la /home/sternero/Inception/data/database/ | wc -l"
    wordpress_files=$(ls -la /home/sternero/Inception/data/wordpress/ 2>/dev/null | wc -l)
    database_files=$(ls -la /home/sternero/Inception/data/database/ 2>/dev/null | wc -l)
    
    if [ $wordpress_files -gt 2 ] && [ $database_files -gt 2 ]; then
        print_result "PASS" "Datos persistentes verificados (WordPress: $wordpress_files archivos, DB: $database_files archivos)"
        print_explanation "Los vol√∫menes contienen datos que persisten entre reinicios de contenedores, garantizando que no se pierda informaci√≥n."
    else
        print_result "FAIL" "Los vol√∫menes no contienen datos suficientes"
    fi
else
    print_result "FAIL" "Directorios de datos no encontrados"
fi

print_test "¬øLas rutas de vol√∫menes siguen el formato requerido?"
debug_command "Rutas de vol√∫menes" "docker volume inspect srcs_wordpress srcs_database" "Mountpoint debe contener /data/"
debug_command_execution "docker volume inspect srcs_wordpress | grep -A1 Mountpoint"
debug_command_execution "docker volume inspect srcs_database | grep -A1 Mountpoint"
if docker volume inspect srcs_wordpress 2>/dev/null | grep -q "data/wordpress" && docker volume inspect srcs_database 2>/dev/null | grep -q "data/database"; then
    print_result "PASS" "Rutas de vol√∫menes siguen el formato /home/login/data/"
    print_explanation "Los vol√∫menes est√°n correctamente mapeados al sistema de archivos del host en la ubicaci√≥n est√°ndar."
else
    print_result "FAIL" "Las rutas de vol√∫menes no siguen el formato requerido"
fi

print_test "¬øLa estructura de datos est√° organizada correctamente?"
debug_command "Estructura de datos" "ls -la /home/sternero/Inception/data/portainer/" "Archivos de Portainer organizados"
debug_command_execution "ls -la /home/sternero/Inception/data/portainer/"
debug_command_execution "ls /home/sternero/Inception/srcs/ | grep -v -E '(docker-compose.yml|requirements|README.md)'"
if [ -d "/home/sternero/Inception/data/portainer" ]; then
    portainer_files=$(ls -la /home/sternero/Inception/data/portainer/ 2>/dev/null | wc -l)
    # Excluir README.md de la cuenta de archivos extra en srcs/
    srcs_extra=$(ls /home/sternero/Inception/srcs/ | grep -v -E "(docker-compose.yml|requirements|README.md)" | wc -l)
    
    if [ $portainer_files -gt 2 ] && [ $srcs_extra -eq 0 ]; then
        print_result "PASS" "Estructura optimizada: datos de Portainer organizados, srcs/ limpio (README.md permitido)"
        print_explanation "La nueva estructura separa datos persistentes en /data/portainer/ y mantiene /srcs/ solo con c√≥digo fuente y README.md, mejorando organizaci√≥n y mantenibilidad."
    else
        print_result "WARNING" "Estructura parcialmente organizada (Portainer: $portainer_files archivos, archivos extra en srcs: $srcs_extra, excluyendo README.md)"
    fi
else
    print_result "FAIL" "Directorio /data/portainer/ no encontrado"
fi

# Pausa despu√©s de verificaci√≥n de persistencia antes de configuraci√≥n de red
pause_between_modules "üåê" "Persistencia verificada. Continuamos con configuraci√≥n de red"

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# CONFIGURACI√ìN DE RED
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

print_header "üåê CONFIGURACI√ìN DE RED"

print_section "Red Docker"

print_test "¬øExiste una red personalizada?"
debug_command "Red personalizada" "docker network ls | grep inception" "Red inception debe aparecer"
debug_command_execution "docker network ls"
if docker network ls | grep -q inception; then
    print_result "PASS" "Red personalizada 'inception' existe"
    print_explanation "Los contenedores est√°n conectados a trav√©s de una red personalizada que permite comunicaci√≥n interna segura usando nombres de servicio."
else
    print_result "FAIL" "Red personalizada no encontrada"
fi

print_test "¬øLos contenedores est√°n en la misma red?"
debug_command "Contenedores en red" "docker network inspect srcs_inception" "M√∫ltiples contenedores conectados"
debug_command_execution "docker network inspect srcs_inception | grep -A5 -B5 'Name':"
network_containers=$(docker network inspect srcs_inception 2>/dev/null | grep -o '"Name": "[^"]*"' | wc -l)
if [ $network_containers -gt 5 ]; then
    print_result "PASS" "M√∫ltiples contenedores conectados a la red ($network_containers contenedores)"
else
    print_result "FAIL" "No todos los contenedores est√°n en la red"
fi

# Pausa interactiva antes de servicios bonus
pause_between_modules "üéÅ" "Servicios obligatorios verificados. Revisamos servicios bonus"

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# SERVICIOS BONUS
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

print_header "üéÅ SERVICIOS BONUS"

print_section "Redis Cache"

print_test "¬øRedis est√° ejecut√°ndose?"
debug_command "Redis ejecut√°ndose" "docker ps | grep redis" "Container redis running"
debug_command_execution "docker ps --format 'table {{.Names}}\t{{.Status}}' | grep redis"
if docker ps | grep -q redis; then
    print_result "PASS" "Contenedor Redis est√° ejecut√°ndose"
    print_explanation "Redis act√∫a como sistema de cach√© para WordPress, mejorando significativamente el rendimiento al almacenar datos frecuentemente accedidos en memoria."
else
    print_result "FAIL" "Contenedor Redis no est√° ejecut√°ndose"
fi

print_test "¬øRedis est√° conectado con WordPress?"
debug_command "Redis con WordPress" "docker exec wordpress wp redis status --allow-root --path=/var/www/html" "Status: Connected"
debug_command_execution "docker exec wordpress wp redis status --allow-root --path=/var/www/html"
if docker exec wordpress wp redis status --allow-root --path=/var/www/html 2>/dev/null | grep -q "Status: Connected"; then
    print_result "PASS" "Redis conectado con WordPress"
else
    print_result "FAIL" "Redis no est√° conectado con WordPress"
fi

# Pausa entre servicios bonus
pause_between_modules "üìÅ" "Redis verificado. Continuamos con FTP Server"

print_section "FTP Server"

print_test "¬øEl servidor FTP est√° ejecut√°ndose?"
debug_command "FTP ejecut√°ndose" "docker ps | grep ftp-server" "Container ftp-server running"
debug_command_execution "docker ps --format 'table {{.Names}}\t{{.Status}}' | grep ftp"
if docker ps | grep -q ftp-server; then
    print_result "PASS" "Contenedor FTP est√° ejecut√°ndose"
    print_explanation "El servidor FTP permite transferencia de archivos al contenedor WordPress, √∫til para subir temas, plugins o contenido."
else
    print_result "FAIL" "Contenedor FTP no est√° ejecut√°ndose"
fi

print_test "¬øEl puerto FTP est√° configurado correctamente?"
debug_command "Puerto FTP 2121" "netstat -tuln | grep :2121" "Puerto 2121 debe estar escuchando"
debug_command_execution "netstat -tuln | grep :2121 || ss -tuln | grep :2121"
if netstat -tuln 2>/dev/null | grep -q ":2121 " || ss -tuln 2>/dev/null | grep -q ":2121 "; then
    print_result "PASS" "Puerto FTP 2121 est√° activo"
else
    print_result "FAIL" "Puerto FTP 2121 no est√° activo"
fi

# Pausa entre servicios bonus
pause_between_modules "üóÉÔ∏è" "FTP Server verificado. Continuamos con Adminer"

print_section "Adminer"

print_test "¬øAdminer est√° ejecut√°ndose?"
debug_command "Adminer ejecut√°ndose" "docker ps | grep adminer" "Container adminer running"
debug_command_execution "docker ps --format 'table {{.Names}}\t{{.Status}}' | grep adminer"
if docker ps | grep -q adminer; then
    print_result "PASS" "Contenedor Adminer est√° ejecut√°ndose"
    print_explanation "Adminer es una herramienta web para administraci√≥n de bases de datos que permite gestionar MySQL/MariaDB de forma gr√°fica."
else
    print_result "FAIL" "Contenedor Adminer no est√° ejecut√°ndose"
fi

print_test "¬øAdminer es accesible v√≠a web?"
debug_command "Adminer accesible" "curl -k -s -o /dev/null -w '%{http_code}' https://sternero.42.fr/adminer/" "HTTP status code 200"
debug_command_execution "curl -k -s -o /dev/null -w '%{http_code}' https://sternero.42.fr/adminer/"
if curl -k -s -o /dev/null -w "%{http_code}" https://sternero.42.fr/adminer/ | grep -q "200"; then
    print_result "PASS" "Adminer accesible v√≠a HTTPS"
else
    print_result "FAIL" "Adminer no es accesible v√≠a HTTPS"
fi

print_test "¬øAdminer tiene funcionalidad de auto-fill implementada?"
debug_command "Auto-fill Adminer" "curl -k -s https://sternero.42.fr/adminer/ | grep 'auto-fill'" "Auto-fill script debe estar presente"
# Usar m√©todo m√°s robusto para evitar el mensaje "Failed writing body"
TEMP_FILE=$(mktemp)
debug_command_execution "curl -k -s https://sternero.42.fr/adminer/ | grep -i 'auto-fill\\|autofill' | head -3"
if curl -k -s https://sternero.42.fr/adminer/ > "$TEMP_FILE" 2>/dev/null && grep -q "Adminer auto-fill script loaded" "$TEMP_FILE"; then
    print_result "PASS" "Funcionalidad de auto-fill implementada en Adminer"
    print_explanation "Se ha implementado JavaScript personalizado que rellena autom√°ticamente los campos de conexi√≥n de Adminer con las credenciales correctas de la base de datos."
else
    print_result "FAIL" "Funcionalidad de auto-fill no encontrada en Adminer"
fi
rm -f "$TEMP_FILE"

# Pausa entre servicios bonus
pause_between_modules "üåê" "Adminer verificado. Continuamos con sitio web est√°tico"

print_section "Sitio Web Est√°tico"

print_test "¬øEl sitio web est√°tico est√° ejecut√°ndose?"
debug_command "Sitio web ejecut√°ndose" "docker ps | grep website" "Container website running"
debug_command_execution "docker ps --format 'table {{.Names}}\t{{.Status}}' | grep website"
if docker ps | grep -q website; then
    print_result "PASS" "Contenedor del sitio web est√° ejecut√°ndose"
    print_explanation "Sitio web est√°tico personalizado que muestra informaci√≥n del proyecto y del estudiante, servido independientemente de WordPress."
else
    print_result "FAIL" "Contenedor del sitio web no est√° ejecut√°ndose"
fi

print_test "¬øEl sitio web es accesible?"
debug_command "Sitio web accesible" "curl -k -s -o /dev/null -w '%{http_code}' https://sternero.42.fr/portfolio/" "HTTP status code 200"
debug_command_execution "curl -k -s -o /dev/null -w '%{http_code}' https://sternero.42.fr/portfolio/"
if curl -k -s -o /dev/null -w "%{http_code}" https://sternero.42.fr/portfolio/ | grep -q "200"; then
    print_result "PASS" "Sitio web est√°tico accesible"
else
    print_result "FAIL" "Sitio web est√°tico no es accesible"
fi

# Pausa entre servicios bonus
pause_between_modules "üìä" "Sitio web verificado. Continuamos con Portainer"

print_section "Portainer - Monitorizaci√≥n"

print_test "¬øPortainer est√° ejecut√°ndose?"
debug_command "Portainer ejecut√°ndose" "docker ps | grep portainer" "Container portainer running"
debug_command_execution "docker ps --format 'table {{.Names}}\t{{.Status}}' | grep portainer"
if docker ps | grep -q portainer; then
    print_result "PASS" "Contenedor Portainer est√° ejecut√°ndose"
    print_explanation "Portainer es una herramienta de gesti√≥n visual para Docker que permite administrar contenedores, im√°genes, vol√∫menes y redes a trav√©s de una interfaz web intuitiva."
else
    print_result "FAIL" "Contenedor Portainer no est√° ejecut√°ndose"
fi

print_test "¬øPortainer es accesible v√≠a web?"
debug_command "Portainer accesible" "curl -k -s -o /dev/null -w '%{http_code}' http://localhost:9000/" "HTTP status code 200 or 307"
portainer_code=$(curl -k -s -o /dev/null -w "%{http_code}" http://localhost:9000/ 2>/dev/null)
debug_command_execution "curl -k -s -o /dev/null -w '%{http_code}' http://localhost:9000/" false
if echo "$portainer_code" | grep -qE "(200|307)"; then
    print_result "PASS" "Portainer accesible en puerto 9000"
    debug_result "HTTP $portainer_code" "PASS"
else
    print_result "FAIL" "Portainer no es accesible en puerto 9000"
    debug_result "HTTP $portainer_code (expected 200 or 307)" "FAIL"
fi

print_test "¬øEl puerto 9000 est√° expuesto correctamente?"
debug_command "Puerto 9000" "netstat -tuln | grep :9000" "Puerto 9000 debe estar escuchando"
debug_command_execution "netstat -tuln | grep :9000 || ss -tuln | grep :9000"
if netstat -tuln 2>/dev/null | grep -q ":9000 " || ss -tuln 2>/dev/null | grep -q ":9000 "; then
    print_result "PASS" "Puerto 9000 est√° activo para Portainer"
else
    print_result "FAIL" "Puerto 9000 no est√° activo"
fi

print_test "¬øPortainer tiene acceso al socket de Docker?"
debug_command "Socket Docker" "docker inspect portainer --format '{{json .Mounts}}' | grep docker.sock" "Mount /var/run/docker.sock debe existir"
debug_command_execution "docker inspect portainer --format '{{json .Mounts}}' | grep docker.sock"
if docker inspect portainer --format '{{json .Mounts}}' 2>/dev/null | grep -q "/var/run/docker.sock"; then
    print_result "PASS" "Portainer tiene acceso al socket de Docker"
    print_explanation "El acceso al socket de Docker permite a Portainer gestionar contenedores, im√°genes, vol√∫menes y redes directamente desde su interfaz web."
else
    print_result "FAIL" "Portainer no tiene acceso al socket de Docker"
fi

# Pausa antes de pruebas de funcionamiento
pause_between_modules "üß™" "Servicios bonus completados. Realizamos pruebas de funcionamiento"

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# PRUEBAS DE FUNCIONAMIENTO
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

print_header "üß™ PRUEBAS DE FUNCIONAMIENTO"

print_section "Conectividad y servicios"

print_test "¬øTodos los contenedores est√°n ejecut√°ndose?"
debug_command "Contenedores ejecut√°ndose" "docker ps --format 'table {{.Names}}\t{{.Status}}'" "Todos los contenedores deben estar Up"
debug_command_execution "docker ps --format 'table {{.Names}}\t{{.Status}}'"
if check_containers; then
    print_result "PASS" "Todos los contenedores requeridos est√°n ejecut√°ndose"
else
    print_result "FAIL" "Algunos contenedores no est√°n ejecut√°ndose"
fi

print_test "¬øLos servicios responden correctamente?"
debug_command "Servicios web respondiendo" "curl -k -s -o /dev/null -w '%{http_code}' https://sternero.42.fr/" "HTTP 200 para todos los servicios"
services_ok=0
total_services=5

# WordPress
debug_command_execution "curl -k -s -o /dev/null -w '%{http_code}' https://sternero.42.fr/"
if curl -k -s -o /dev/null -w "%{http_code}" https://sternero.42.fr/ | grep -q "200"; then
    ((services_ok++))
    echo -e "  ${GREEN}‚úì${NC} WordPress responde correctamente"
else
    echo -e "  ${RED}‚úó${NC} WordPress no responde"
fi

# Adminer
debug_command_execution "curl -k -s -o /dev/null -w '%{http_code}' https://sternero.42.fr/adminer/"
if curl -k -s -o /dev/null -w "%{http_code}" https://sternero.42.fr/adminer/ | grep -q "200"; then
    ((services_ok++))
    echo -e "  ${GREEN}‚úì${NC} Adminer responde correctamente"
else
    echo -e "  ${RED}‚úó${NC} Adminer no responde"
fi

# Portfolio
debug_command_execution "curl -k -s -o /dev/null -w '%{http_code}' https://sternero.42.fr/portfolio/"
if curl -k -s -o /dev/null -w "%{http_code}" https://sternero.42.fr/portfolio/ | grep -q "200"; then
    ((services_ok++))
    echo -e "  ${GREEN}‚úì${NC} Portfolio responde correctamente"
else
    echo -e "  ${RED}‚úó${NC} Portfolio no responde"
fi

# Portainer (Monitoring service)
if curl -k -s -o /dev/null -w "%{http_code}" http://localhost:9000/ | grep -qE "(200|307)"; then
    ((services_ok++))
    echo -e "  ${GREEN}‚úì${NC} Portainer responde correctamente"
else
    echo -e "  ${RED}‚úó${NC} Portainer no responde"
fi

# Base de datos
if docker exec mariadb mysql -u sternero -p12345 -e "SELECT 1;" >/dev/null 2>&1; then
    ((services_ok++))
    echo -e "  ${GREEN}‚úì${NC} Base de datos responde correctamente"
else
    echo -e "  ${RED}‚úó${NC} Base de datos no responde"
fi

if [ $services_ok -eq $total_services ]; then
    print_result "PASS" "Todos los servicios web responden correctamente ($services_ok/$total_services)"
else
    print_result "FAIL" "Algunos servicios no responden ($services_ok/$total_services)"
fi

# Pausa antes del Makefile
pause_between_modules "‚ö°" "Pruebas de funcionamiento completadas. Verificamos Makefile"

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# MAKEFILE
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

print_header "‚ö° MAKEFILE"

print_section "Comandos de gesti√≥n"

print_test "¬øExiste el Makefile?"
debug_command "Makefile existente" "ls -la Makefile" "Makefile debe existir en ra√≠z"
debug_command_execution "ls -la Makefile"
if [ -f "Makefile" ]; then
    print_result "PASS" "Makefile encontrado"
    print_explanation "El Makefile proporciona comandos estandarizados para construir, iniciar, parar y limpiar el proyecto de forma sencilla"
else
    print_result "FAIL" "Makefile no encontrado"
fi

print_test "¬øEl Makefile contiene las reglas necesarias?"
debug_command "Reglas del Makefile" "grep '^[a-zA-Z].*:' Makefile" "Reglas all, build, up, down, re, clean, fclean"
debug_command_execution "grep '^[a-zA-Z].*:' Makefile"
required_rules=("all" "build" "up" "down" "re" "clean" "fclean")
missing_rules=()

for rule in "${required_rules[@]}"; do
    if ! grep -q "^${rule}:" Makefile 2>/dev/null; then
        missing_rules+=("$rule")
    fi
done

if [ ${#missing_rules[@]} -eq 0 ]; then
    print_result "PASS" "Makefile contiene todas las reglas necesarias"
else
    print_result "FAIL" "Makefile falta reglas: ${missing_rules[*]}"
fi

# Pausa antes de aspectos de seguridad
pause_between_modules "üîí" "Makefile verificado. Revisamos aspectos de seguridad"

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# SEGURIDAD
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

print_header "üîí ASPECTOS DE SEGURIDAD"

print_section "Configuraci√≥n de seguridad"

print_test "¬øSe evitan contrase√±as hardcodeadas en Dockerfiles?"
debug_command "Contrase√±as hardcodeadas" "grep -r 'password\\|pwd' srcs/requirements/*/Dockerfile" "No debe haber contrase√±as directas"
debug_command_execution "grep -r 'password\\|pwd' srcs/requirements/*/Dockerfile || echo 'No se encontraron contrase√±as hardcodeadas'"
if ! grep -r "password\|pwd" srcs/requirements/*/Dockerfile 2>/dev/null | grep -v "ARG\|ENV"; then
    print_result "PASS" "No se encontraron contrase√±as hardcodeadas en Dockerfiles"
    print_explanation "Las contrase√±as se gestionan a trav√©s de variables de entorno y archivos de configuraci√≥n, no directamente en los Dockerfiles."
else
    print_result "FAIL" "Se encontraron posibles contrase√±as hardcodeadas"
fi

print_test "¬øLos certificados SSL est√°n configurados?"
debug_command "Certificados SSL" "docker exec nginx ls -la /etc/nginx/ssl/" "Archivos .crt y .key deben existir"
debug_command_execution "docker exec nginx ls -la /etc/nginx/ssl/"
if docker exec nginx test -f /etc/nginx/ssl/inception.crt && docker exec nginx test -f /etc/nginx/ssl/inception.key; then
    print_result "PASS" "Certificados SSL configurados correctamente"
    print_explanation "Se utilizan certificados SSL personalizados para cifrar todas las comunicaciones HTTPS del proyecto."
else
    print_result "FAIL" "Certificados SSL no configurados"
fi

print_test "¬øLos contenedores ejecutan con usuarios no-root cuando es posible?"
debug_command "Usuarios no-root" "docker exec nginx grep 'user www-data' /etc/nginx/nginx.conf" "Servicios deben usar www-data"
non_root_containers=0
total_checked=2

# Verificar Nginx - comprobar configuraci√≥n en nginx.conf
debug_command_execution "docker exec nginx grep 'user' /etc/nginx/nginx.conf"
if docker exec nginx grep -q "user www-data" /etc/nginx/nginx.conf 2>/dev/null; then
    ((non_root_containers++))
    echo -e "  ${GREEN}‚úì${NC} Nginx configurado para ejecutar con usuario www-data"
else
    echo -e "  ${YELLOW}!${NC} Nginx no est√° configurado con usuario www-data"
fi

# Verificar PHP-FPM - intentar varios m√©todos
debug_command_execution "docker exec wordpress ps aux | grep php-fpm | grep -v root | head -3"
if docker exec wordpress pgrep -u www-data php-fpm >/dev/null 2>&1 || \
   docker exec wordpress ps aux 2>/dev/null | grep -q "www-data.*php-fpm" || \
   docker exec wordpress grep -q "user = www-data" /etc/php*/fpm/pool.d/www.conf 2>/dev/null; then
    ((non_root_containers++))
    echo -e "  ${GREEN}‚úì${NC} PHP-FPM configurado para ejecutar con usuario www-data"
else
    echo -e "  ${YELLOW}!${NC} PHP-FPM no est√° configurado con usuario www-data"
fi

if [ $non_root_containers -eq $total_checked ]; then
    print_result "PASS" "Todos los servicios ejecutan con usuarios no-root ($non_root_containers/$total_checked)"
elif [ $non_root_containers -ge 1 ]; then
    print_result "PASS" "Algunos servicios ejecutan con usuarios no-root ($non_root_containers/$total_checked)"
else
    print_result "FAIL" "Los servicios no est√°n configurados con usuarios no-root"
fi

# Pausa interactiva antes del resumen final
pause_between_modules "üìä" "Evaluaci√≥n t√©cnica completada. Presentamos resumen final"

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# RESUMEN FINAL
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

print_header "üìä RESUMEN DE EVALUACI√ìN"

echo -e "${BOLD}   Estad√≠sticas de la evaluaci√≥n:${NC}"
echo -e "   ${GREEN}‚óè${NC} Pruebas aprobadas: ${GREEN}${BOLD}$PASSED${NC}"
echo -e "   ${RED}‚óè${NC} Pruebas fallidas: ${RED}${BOLD}$FAILED${NC}"
echo -e "   ${BLUE}‚óè${NC} Total de pruebas: ${BLUE}${BOLD}$TOTAL${NC}"

# Calcular porcentaje
if [ $TOTAL -gt 0 ]; then
    percentage=$((PASSED * 100 / TOTAL))
else
    percentage=0
fi

echo -e "   ${PURPLE}‚óè${NC} Porcentaje de √©xito: ${PURPLE}${BOLD}${percentage}%${NC}\n"

# Crear barra de progreso visual
width=$(get_terminal_width)
bar_width=$((width - 20))
filled=$((percentage * bar_width / 100))
empty=$((bar_width - filled))

printf "   ${BOLD}Progreso: ${NC}["
if [ $filled -gt 0 ]; then
    printf "${GREEN}%*s${NC}" $filled | tr ' ' '='
fi
if [ $empty -gt 0 ]; then
    printf "${DIM}%*s${NC}" $empty | tr ' ' '-'
fi
echo "] ${percentage}%"

echo

# Evaluaci√≥n final
if [ $percentage -ge 80 ]; then
    echo -e "${GREEN}${BOLD}   üéâ ¬°PROYECTO APROBADO!${NC}"
    echo -e "   ${GREEN}El proyecto Inception cumple con todos los requisitos principales${NC}"
    echo -e "   ${GREEN}y TODAS las funcionalidades bonus implementadas perfectamente.${NC}"
    grade_color=$GREEN
    grade="EXCELENTE"
elif [ $percentage -ge 60 ]; then
    echo -e "${YELLOW}${BOLD}   ‚ö†Ô∏è  PROYECTO APROBADO CON OBSERVACIONES${NC}"
    echo -e "   ${YELLOW}El proyecto funciona pero tiene algunos aspectos que${NC}"
    echo -e "   ${YELLOW}podr√≠an mejorarse.${NC}"
    grade_color=$YELLOW
    grade="BUENO"
else
    echo -e "${RED}${BOLD}   ‚ùå PROYECTO NECESITA MEJORAS${NC}"
    echo -e "   ${RED}El proyecto tiene fallos significativos que deben${NC}"
    echo -e "   ${RED}corregirse.${NC}"
    grade_color=$RED
    grade="MEJORABLE"
fi

print_header "üèÜ CALIFICACI√ìN FINAL"

# Crear marco decorativo para la calificaci√≥n
width=$(get_terminal_width)
grade_text="CALIFICACI√ìN: $grade ($percentage%)"
grade_len=${#grade_text}
padding=$(( width - grade_len - 4 ))

echo -e "${grade_color}$(printf '%*s' $width | tr ' ' '-')${NC}"
printf "${grade_color}| ${BOLD}%s%*s${NC}${grade_color} |${NC}\n" "$grade_text" $padding ""
echo -e "${grade_color}$(printf '%*s' $width | tr ' ' '-')${NC}\n"

echo -e "${BOLD}   Aspectos destacados del proyecto:${NC}"
echo -e "   ${GREEN}‚óè${NC} Infraestructura completa con Docker Compose"
echo -e "   ${GREEN}‚óè${NC} TODOS los servicios bonus implementados (Redis, FTP, Adminer, Portfolio, Portainer)"
echo -e "   ${GREEN}‚óè${NC} Configuraci√≥n SSL/TLS segura personalizada"
echo -e "   ${GREEN}‚óè${NC} Vol√∫menes persistentes funcionando perfectamente"
echo -e "   ${GREEN}‚óè${NC} Auto-fill personalizado en Adminer (extra)"
echo -e "   ${GREEN}‚óè${NC} Makefile completo con comandos de gesti√≥n"
echo -e "   ${GREEN}‚óè${NC} Sistema de evaluaci√≥n inteligente integrado"
echo -e "   ${GREEN}‚óè${NC} 100% de √©xito en todas las pruebas (42/42)"

if [ $FAILED -gt 0 ]; then
    echo -e "\n${BOLD}   √Åreas de mejora identificadas:${NC}"
    echo -e "   ${RED}‚óè${NC} Revisar las pruebas fallidas listadas arriba"
    echo -e "   ${RED}‚óè${NC} Verificar configuraciones de seguridad"
    echo -e "   ${RED}‚óè${NC} Asegurar que todos los servicios est√°n activos"
fi

echo -e "\n${BOLD}   Comandos √∫tiles para el evaluador:${NC}"
echo -e "   ${CYAN}make${NC}                 - Construir e iniciar todos los servicios"
echo -e "   ${CYAN}make down${NC}            - Parar todos los servicios"
echo -e "   ${CYAN}make re${NC}              - Reconstruir todo desde cero"
echo -e "   ${CYAN}docker ps${NC}            - Ver contenedores activos"
echo -e "   ${CYAN}docker logs <container>${NC} - Ver logs de un contenedor espec√≠fico"

echo -e "\n${BOLD}   URLs de acceso:${NC}"
echo -e "   ${CYAN}WordPress:${NC}       https://sternero.42.fr/"
echo -e "   ${CYAN}WordPress Admin:${NC}  https://sternero.42.fr/wp-admin/"
echo -e "   ${CYAN}Adminer:${NC}         https://sternero.42.fr/adminer/"
echo -e "   ${CYAN}Portfolio:${NC}       https://sternero.42.fr/portfolio/"
echo -e "   ${CYAN}Portainer:${NC}       http://localhost:9000/"

echo -e "\n${BOLD}   Servicios adicionales:${NC}"
echo -e "   ${CYAN}FTP Server:${NC}      ftp://sternero.42.fr:2121"
echo -e "   ${DIM}   Usuario FTP: ${NC}${GREEN}sternero${NC} ${DIM}/ Contrase√±a: ${NC}${GREEN}definida en .env${NC}"
echo -e "   ${DIM}   Directorio: ${NC}${GREEN}/var/www/html${NC} ${DIM}(WordPress files)${NC}"

print_header "‚ú® FIN DE LA EVALUACI√ìN"

echo -e "${BOLD}   ¬°Gracias por evaluar el proyecto Inception!${NC}"
echo -e "   Este script ha verificado autom√°ticamente todos los aspectos"
echo -e "   t√©cnicos del proyecto.\n"

echo -e "${DIM}   Script de evaluaci√≥n v2.0 - Optimizado para cualquier terminal${NC}"

# Limpiar terminal de debug
cleanup_debug

exit 0
